const path      = require('path');
const webpack   = require('webpack');
const externals = require('webpack-node-externals');
const socket    = require('socket.io');
const fs        = require('fs');
const glob      = require('glob');

// Server key to exclude sensitive JS
const key = '7bb513d9fe6eeb8776b1';

// Default to 'dev' environment
const env = process.env.ENVIRONMENT || 'dev';

console.log(`Building for ${env}`);

const plugins = {
	'dev' : [],

	'production' : [
		new webpack.optimize.UglifyJsPlugin(),
	]
};

const alias = {
	client : {
		Routes : path.resolve(__dirname, 'src/routes.client.js'),
	},

	server : {
		Routes : path.resolve(__dirname, 'src/routes.server.js'),
	}
};

// Build plugins
glob('src/plugins/**/*.js', (error, files) => {
	const js = `
		/**
		 * THIS FILE IS AUTOMATICALLY GENERATED BY index.js
		 * ANY CHANGES WILL BE OVERWRITTEN
		 */
		${files.map((file, i) => `
			import _${i} from '${path.resolve(file)}';
		`).join('\n')}

		const tmp_plugins = [];

		${files.map((file, i) => `
			tmp_plugins.push(_${i});
		`).join('\n')}

		export var plugins = tmp_plugins;
	`;

	fs.writeFileSync(`./src/plugins.js`, js);
});

// Build components
glob('src/components/**/*.js', (error, files) => {
	const routes = {
		client : [],
		server : [],
	};

	files.forEach((rel) => {
		const file  = path.resolve(rel);
		const tmp   = `${path.dirname(rel)}/${path.basename(rel, '.js')}`;
		const route = tmp.substr('src/components'.length);

		if(route.endsWith('server')) {
			routes.server.push({ file, route });
		}
		else if(route.endsWith('client')) {
			routes.client.push({ file, route });
		}
		else {
			routes.server.push({ file, route });
			routes.client.push({ file, route });
		}
	});

	for(let type in routes) {
		const js = `
			/**
			 * THIS FILE IS AUTOMATICALLY GENERATED BY index.js
			 * ANY CHANGES WILL BE OVERWRITTEN
			 */
			${routes[type].map(({ file }, i) => `
				import _${i} from '${file}';
			`).join('\n')}

			const tmp_routes = {};

			${routes[type].map(({ route }, i) => `
				tmp_routes['${route}'] = _${i};
			`).join('\n')}

			export var routes = tmp_routes;
		`;

		fs.writeFileSync(`./src/routes.${type}.js`, js);
	}

	// Server config
	const server = {
		target    : 'node',
		externals : externals(),
		entry     : [ 'babel-polyfill', path.resolve(__dirname, 'src/server.js') ],

		resolve : {
			alias : alias.server,
		},

		output : {
			path          : path.resolve(__dirname, 'dist'),
			filename      : 'server.js',
			libraryTarget : 'commonjs2',
		}
	};

	// Client config
	const client = {
		target  : 'web',
		entry   : [ 'babel-polyfill', path.resolve(__dirname, 'src/main.js') ],
		plugins : plugins[env] || [],

		resolve : {
			alias : alias.client,
		},

		node : {
			fs : "empty"
		},

		output : {
			path          : path.resolve(__dirname, 'dist'),
			filename      : 'main.js',
			libraryTarget : 'umd',
		},

		module : {
			rules : [
				{
					test    : /\.js$/,
					exclude : /(node_modules|bower_components)/,

					use : {
						loader : 'preprocess-loader?-SERVER',
					}
				},
				{
					test    : /\.js$/,
					exclude : /(node_modules|bower_components)/,

					use : {
						loader : 'babel-loader?presets=env&cacheDirectory=true',
					}
				}
			]
		}
	};

	// Compile
	webpack([ server, client ], (error, result) => {
		if(error) {
			console.warn("Error building app:", error);
		}
		else {
			// Remove server-only code from client
			const pattern = new RegExp(`\/\/ BEGIN ${key}\\n[\\s\\S]*?\/\/ END ${key}\\n`, 'g');
			const src     = fs.readFileSync('./dist/main.js') + '';
			const out     = src.replace(pattern, '');

			fs.writeFileSync('./dist/main.js', out);

			console.log("Successfully built app");

			const Server = require('./dist/server.js').Server;
			const server = new Server(process.env);

			server.start().then(() => {
				console.log(`Server started at ${server.url}`);
			});
		}
	});
});
