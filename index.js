const path      = require('path');
const webpack   = require('webpack');
const externals = require('webpack-node-externals');
const socket    = require('socket.io');
const fs        = require('fs');
const glob      = require('glob');

// Default to 'dev' environment
const env = process.env.ENVIRONMENT || 'dev';

console.log(`Building for ${env}`);

const plugins = {
	'dev' : [
		// new webpack.optimize.UglifyJsPlugin()
	],

	'production' : [
		new webpack.optimize.UglifyJsPlugin()
	]
};

glob('src/components/**/*.js', (error, files) => {
	const routes = files.map((rel) => {
		const file  = path.resolve(rel);
		const tmp   = `${path.dirname(rel)}/${path.basename(rel, '.js')}`;
		const route = tmp.substr('src/components'.length);

		return { file, route };
	});

	const imports = routes.map(({ file, route }, i) => {
		return `import _${i} from '${file}';`;
	});

	const exports = routes.map(({ route }, i) => {
		return `classes['${route}'] = _${i};`;
	});

	const js = `
		/**
		 * THIS FILE IS AUTOMATICALLY GENERATED BY index.js
		 * ANY CHANGES WILL BE OVERWRITTEN
		 */
		${imports.join('\n')}

		export var routes = {
			${routes.map(
				({ route }, i) => `'${route}' : _${i},`
			).join('\n')}
		};
	`;

	fs.writeFileSync('./src/routes.js', js);

	// Server config
	const server = {
		target    : 'node',
		externals : externals(),
		entry     : [ 'babel-polyfill', path.resolve(__dirname, 'src/server.js') ],

		output : {
			path          : path.resolve(__dirname, 'dist'),
			filename      : 'server.js',
			libraryTarget : 'commonjs2',
		}
	};

	// Client config
	const client = {
		target  : 'web',
		entry   : [ 'babel-polyfill', path.resolve(__dirname, 'src/main.js') ],
		plugins : plugins[env] || [],

		output : {
			path          : path.resolve(__dirname, 'dist'),
			filename      : 'main.js',
			libraryTarget : 'umd',
		},

		module : {
			rules : [
				{
					test    : /\.js$/,
					exclude : /(node_modules|bower_components)/,

					use : {
						loader : 'babel-loader?presets=env&cacheDirectory=true',
					}
				}
			]
		}
	};

	// Compile
	webpack([ server, client ], (error, result) => {
		if(error) {
			console.warn("Error building app:", error);
		}
		else {
			console.log("Successfully built app");

			const Server = require('./dist/server.js').Server;
			const server = new Server(process.env);

			server.start().then(() => {
				console.log(`Server started at ${server.url}`);
			});
		}
	});
});
